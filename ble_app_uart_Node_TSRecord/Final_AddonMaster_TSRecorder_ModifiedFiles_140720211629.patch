Index: main.c
===================================================================
--- main.c	(revision 10)
+++ main.c	(working copy)
@@ -160,8 +160,10 @@
 #define DIODE_FWD_VOLT_DROP_MILLIVOLTS 270  //!< Typical forward voltage drop of the diode (Part no: SD103ATW-7-F) that is connected in series with the voltage supply. This is the voltage drop when the forward current is 1mA. Source: Data sheet of 'SURFACE MOUNT SCHOTTKY BARRIER DIODE ARRAY' available at www.diodes.com.
 #define ADC_RES_10BIT                  1024 //!< Maximum digital value for 10-bit ADC conversion.
 #define ADC_PRE_SCALING_COMPENSATION   6    //!< The ADC is configured to use VDD with 1/3 prescaling as input. And hence the result of conversion is to be multiplied by 3 to get the actual value of the battery voltage.
+//#define ADC_RESULT_IN_MILLI_VOLTS(ADC_VALUE) \
+//    ((((ADC_VALUE) *ADC_REF_VOLTAGE_IN_MILLIVOLTS) / ADC_RES_10BIT) * ADC_PRE_SCALING_COMPENSATION)
 #define ADC_RESULT_IN_MILLI_VOLTS(ADC_VALUE) \
-    ((((ADC_VALUE) *ADC_REF_VOLTAGE_IN_MILLIVOLTS) / ADC_RES_10BIT) * ADC_PRE_SCALING_COMPENSATION)
+    ((((ADC_VALUE)*4300) / ADC_RES_10BIT))
 
 nrf_saadc_value_t guADCRaw_buf;                   //!< Buffer used for storing ADC value.
 uint16_t          guBatteryVoltagelevelmillis,guBatteryInPercent= 0; //!< Current battery level.
@@ -445,72 +447,72 @@
     nrf_drv_rtc_enable(&rtc);
 }
 
-///**@brief Function handling events from 'nrf_drv_saadc.c'.
-// *
-// * @param[in] p_evt SAADC event.
-// */
-//static void saadc_event_handler(nrf_drv_saadc_evt_t const * p_evt)
-//{
-//    if (p_evt->type == NRF_DRV_SAADC_EVT_DONE)
-//    {
-//        nrf_saadc_value_t adc_result;
-//
-//        adc_result = p_evt->data.done.p_buffer[0];
-//
-//        guBatteryVoltagelevelmillis = ADC_RESULT_IN_MILLI_VOLTS(adc_result) ;//+ DIODE_FWD_VOLT_DROP_MILLIVOLTS;
-//        //RealBatteryVoltagemillis = BAT_SLOPE * (float)(adc_result - REF_RAW_VAL) + (float)REF_VOLT;
-//#if SERIAL_DEBUG_ENABLE
-//        NRF_LOG_INFO("Bat = %d",guBatteryVoltagelevelmillis);
-//        NRF_LOG_PROCESS();
-//#endif
-//        double tfSlope = 1.0 * (100 - 0) / (3000 - 2600);
-//        guBatteryInPercent = 0 + tfSlope * (float)(guBatteryVoltagelevelmillis - 2600);
-//        if(guBatteryInPercent > 100)
-//          guBatteryInPercent = 100;
-//    }
-//}
+/**@brief Function handling events from 'nrf_drv_saadc.c'.
+ *
+ * @param[in] p_evt SAADC event.
+ */
+static void saadc_event_handler(nrf_drv_saadc_evt_t const * p_evt)
+{
+    if (p_evt->type == NRF_DRV_SAADC_EVT_DONE)
+    {
+        nrf_saadc_value_t adc_result;
 
+        adc_result = p_evt->data.done.p_buffer[0];
 
-//void vBatteryInit(void)
-//{
-//    ret_code_t err_code = nrf_drv_saadc_init(NULL, saadc_event_handler);
-//
-//    APP_ERROR_CHECK(err_code);
-//
-//    nrf_saadc_channel_config_t config =
-//        NRF_DRV_SAADC_DEFAULT_CHANNEL_CONFIG_SE(NRF_SAADC_INPUT_VDD);
-//    err_code = nrf_drv_saadc_channel_init(0, &config);
-//    APP_ERROR_CHECK(err_code);
-//
-//    err_code = nrf_drv_saadc_buffer_convert(&guADCRaw_buf, 1);
-//    APP_ERROR_CHECK(err_code);
-//
-//    err_code = nrf_drv_saadc_sample();
-//    APP_ERROR_CHECK(err_code);
-//}
-//
-//
-//void vGetBatteryVoltage()
-//{
-//    if (!nrf_drv_saadc_is_busy())
-//    {
-//        ret_code_t err_code = nrf_drv_saadc_buffer_convert(&guADCRaw_buf, 1);
-//        APP_ERROR_CHECK(err_code);
-//
-//        err_code = nrf_drv_saadc_sample();
-//        APP_ERROR_CHECK(err_code);
-//    }
-//}
-//
-//
-///**@brief Function for updating the VBATT field of TLM*/
-//static void update_vbatt(void)
-//{
-//    vGetBatteryVoltage(); // Get new battery voltage
-//    
-//}
+        guBatteryVoltagelevelmillis = ADC_RESULT_IN_MILLI_VOLTS(adc_result) ;//+ DIODE_FWD_VOLT_DROP_MILLIVOLTS;
+        //RealBatteryVoltagemillis = BAT_SLOPE * (float)(adc_result - REF_RAW_VAL) + (float)REF_VOLT;
+#if SERIAL_DEBUG_ENABLE
+        NRF_LOG_INFO("Bat = %d",guBatteryVoltagelevelmillis);
+        NRF_LOG_PROCESS();
+#endif
+        double tfSlope = 1.0 * (100 - 0) / (2767 - 2433);
+        guBatteryInPercent = 0 + tfSlope * (float)(guBatteryVoltagelevelmillis - 2433);
+        if(guBatteryInPercent > 100)
+          guBatteryInPercent = 100;
+    }
+}
 
 
+void vBatteryInit(void)
+{
+    ret_code_t err_code = nrf_drv_saadc_init(NULL, saadc_event_handler);
+
+    APP_ERROR_CHECK(err_code);
+
+    nrf_saadc_channel_config_t config =
+        NRF_DRV_SAADC_DEFAULT_CHANNEL_CONFIG_SE(NRF_SAADC_INPUT_VDD);
+    err_code = nrf_drv_saadc_channel_init(0, &config);
+    APP_ERROR_CHECK(err_code);
+
+    err_code = nrf_drv_saadc_buffer_convert(&guADCRaw_buf, 1);
+    APP_ERROR_CHECK(err_code);
+
+    err_code = nrf_drv_saadc_sample();
+    APP_ERROR_CHECK(err_code);
+}
+
+
+void vGetBatteryVoltage()
+{
+    if (!nrf_drv_saadc_is_busy())
+    {
+        ret_code_t err_code = nrf_drv_saadc_buffer_convert(&guADCRaw_buf, 1);
+        APP_ERROR_CHECK(err_code);
+
+        err_code = nrf_drv_saadc_sample();
+        APP_ERROR_CHECK(err_code);
+    }
+}
+
+
+/**@brief Function for updating the VBATT field of TLM*/
+static void update_vbatt(void)
+{
+    vGetBatteryVoltage(); // Get new battery voltage
+    
+}
+
+
 void vLEDOn(uint32_t pin_number)
 {
   nrf_gpio_pin_write(pin_number, 1);
@@ -886,14 +888,32 @@
           guBatteryInPercent = 100;
         }
   #endif
+        vSendDataToBLEUART(READ_BAT_CMD_ACK);
 
-        vSendDataToBLEUART(READ_BAT_CMD_ACK);
+        //baterry monitor
+        vBatteryInit();
+        nrf_delay_ms(100);
+        for(int Ind=0;Ind < 5;Ind++)
+        {
+          update_vbatt();
+          nrf_delay_ms(5);
+        }
+        nrf_delay_ms(50);
+        nrfx_saadc_channel_uninit(0);
+        nrfx_saadc_uninit();
+
+         NRF_LOG_INFO("Batt: %d percent",guBatteryInPercent);
+         NRF_LOG_PROCESS();
+
+
+
   #if SERIAL_DEBUG_ENABLE
         NRF_LOG_INFO("Read Bat CMD");
         NRF_LOG_PROCESS();
   #endif
         uint8_t TempBuffer[50];
-        sprintf(TempBuffer,"TS:%d, Bat:%d%%, DevVer:%s",uReadTime(),guBatteryInPercent,FIRMWARE_VERSION);
+//        sprintf(TempBuffer,"TS:%d, Bat:%d%%, DevVer:%s",uReadTime(),guBatteryInPercent,FIRMWARE_VERSION);
+        sprintf(TempBuffer,"0x55,%d",guBatteryInPercent);
         vSendDataToBLEUART(TempBuffer);
     }
      else if(!strncmp(READ_TIMESTAMPS_CMD,tuCmdBuff,5))
@@ -1562,13 +1582,13 @@
 
 void vLowBatteryLEDPattern()
 {
-  for(int Ind=0;Ind<10;Ind++)
-    {
+//  for(int Ind=0;Ind<10;Ind++)
+//    {
       vLEDOn(LED_PIN);
-      nrf_delay_ms(500);
+      nrf_delay_ms(1000);
       vLEDOff(LED_PIN);
       nrf_delay_ms(500);
-    }
+//    }
 }
 
 
@@ -1698,7 +1718,13 @@
     //sd_ble_gap_tx_power_set(BLE_GAP_TX_POWER_ROLE_ADV, 0,4);
     advertising_start();
     vPowerupLEDPattern();
-//    vLowBatteryLEDPattern();
+ // check at powerup if Battery percent is less than or equal to low percent indication. then blink LED for indication
+#ifdef MAX1708_ENABLE
+      if(percent <= BATTERY_LOW_PERCENT)
+      {          
+          vLowBatteryLEDPattern();
+      }
+#endif
     gbbootsuccess = 1;
 
 // Enter main loop.
@@ -1722,6 +1748,7 @@
           //RTC event generated to update RTC clock seconds
           if(RtcEventGenerated == 1)
           {
+
 #ifdef MAX1708_ENABLE
             //also check for low battery percent and indicate if so.
             if(MAX1708_SOC_Int(&gxMAX17048) <= BATTERY_LOW_PERCENT)
@@ -1733,6 +1760,32 @@
               }
             }
 #endif
+            
+              RtcEventGenerated =0;
+              //baterry monitor
+              vBatteryInit();
+              nrf_delay_ms(100);
+              for(int Ind=0;Ind < 5;Ind++)
+              {
+                update_vbatt();
+                nrf_delay_ms(5);
+              }
+              nrf_delay_ms(50);
+              nrfx_saadc_channel_uninit(0);
+              nrfx_saadc_uninit();
+
+               NRF_LOG_INFO("Batt: %d percent",guBatteryInPercent);
+               NRF_LOG_PROCESS();
+                //also check for low battery percent and indicate if so.
+              if(guBatteryInPercent <= BATTERY_LOW_PERCENT)
+              {
+
+                for(int loop=0;loop<5;loop++)
+                {
+                   vLowBatteryLEDPattern();
+                }
+              }
+              //end battery monitor
           }
 
          if(gbButtonReleased == 1 && gbConnected == 1 && gbAccessGiven == 1)
